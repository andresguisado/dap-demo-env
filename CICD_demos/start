#!/bin/bash 
set -eo pipefail

source ../config/dap.config
source ./cicd-demo.conf

main() {
  load_policy
  generate_identity_files
  docker-compose up -d
  initialize_client_node
  clear
  docker exec -it client_node bash
}

load_policy() {
  # load policy
  load_policy_REST.sh root ./policy/cicd-policy.yml

  echo "Initializing variables..."
  var_value_add_REST.sh cicd-secrets/test-db-username ThisIsTheTESTDBuserName
  var_value_add_REST.sh cicd-secrets/test-db-password 10938471084710238470973
  var_value_add_REST.sh cicd-secrets/prod-db-username ThisIsThePRODDBuserName
  var_value_add_REST.sh cicd-secrets/prod-db-password aoiuaspduperjqkjnsoudoo
  var_value_add_REST.sh cicd-secrets/aws-access-key-id 909808awsaccesskeyid19238474
  var_value_add_REST.sh cicd-secrets/aws-secret-key 908089awssecretkey8098098
  var_value_add_REST.sh cicd-secrets/aws-creds-template "$(cat aws-creds.template)"
  var_value_add_REST.sh cicd-secrets/aws-ssh-key "$(cat $AWS_SSH_KEY)"
}

generate_identity_files() {
  CONJUR_AUTHN_API_KEY=$(docker exec $CLI_CONTAINER_NAME conjur host rotate_api_key --host $CONJUR_AUTHN_LOGIN)

  # create configuration and identity files (AKA conjurize the host)
  echo "Generating identity file..."
  cat <<IDENTITY_EOF | tee conjur.identity
machine $CONJUR_APPLIANCE_URL/authn
  login host/$CONJUR_AUTHN_LOGIN
  password $CONJUR_AUTHN_API_KEY
IDENTITY_EOF

  echo
  echo "Generating host configuration file..."
  cat <<CONF_EOF | tee conjur.conf
---
appliance_url: $CONJUR_APPLIANCE_URL
account: $CONJUR_ACCOUNT
netrc_path: "/etc/conjur.identity"
cert_file: "/etc/conjur-$CONJUR_ACCOUNT.pem"
CONF_EOF
}

initialize_client_node() {
  docker cp $MASTER_CERT_FILE client_node:/etc
  docker cp ./conjur.conf client_node:/etc
  docker cp ./conjur.identity client_node:/etc
  docker exec client_node chmod 400 /etc/conjur.identity
  rm ./conjur*
  docker exec -it client_node terraform init
  docker cp ./demo/. client_node:/demo/
}

main $@
